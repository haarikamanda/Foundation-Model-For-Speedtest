
Lmod is automatically replacing "gcc-native/12.3" with "gcc/12.2.0".


Inactive Modules:
  1) cray-libsci/23.12.5     2) cray-mpich/8.1.28

WARNING:__main__:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
WARNING:__main__:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
WARNING:__main__:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
WARNING:__main__:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
*** Train ***
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
*** Train ***
*** Train ***
*** Train ***
*** Train ***
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
*** Train ***
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
*** Train ***
*** Train ***
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
*** Train ***
*** Train ***
*** Train ***
*** Train ***
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/training_args.py:1545: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of ðŸ¤— Transformers. Use `eval_strategy` instead
  warnings.warn(
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Tokenizing datasets
Initializing deepspeed-optimized model
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
*** Train ***
*** Train ***
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
Checkpoint detected, resuming training at /global/homes/h/haarika/pscratch/network-data-representation/all_mode_outputs/output_01_22_2025/checkpoint-60000. To avoid this behavior, change the `--output_dir` or add `--overwrite_output_dir` to train from scratch.
*** Train ***
*** Train ***
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...

Using /global/u2/h/haarika/.cache/torch_extensions/py311_cu120 as PyTorch extensions root...
Detected CUDA files, patching ldflags
Emitting ninja build file /global/u2/h/haarika/.cache/torch_extensions/py311_cu120/fused_adam/build.ninja...
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/torch/utils/cpp_extension.py:1965: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
Building extension module fused_adam...
Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...Loading extension module fused_adam...Loading extension module fused_adam...


Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
Loading extension module fused_adam...
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
  0%|          | 0/90000 [00:00<?, ?it/s]/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/trainer.py:2944: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/global/common/software/m4629/environments/netfound/lib/python3.11/site-packages/transformers/modeling_utils.py:1141: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
 20%|â–ˆâ–ˆ        | 18001/90000 [00:02<00:11, 6515.64it/s] 20%|â–ˆâ–ˆ        | 18013/90000 [00:12<00:11, 6515.64it/s] 20%|â–ˆâ–ˆ        | 18014/90000 [00:13<01:13, 984.66it/s]  20%|â–ˆâ–ˆ        | 18015/90000 [00:14<01:19, 901.90it/s] 20%|â–ˆâ–ˆ        | 18033/90000 [00:29<01:19, 901.90it/s] 20%|â–ˆâ–ˆ        | 18034/90000 [00:30<04:22, 274.47it/s] 20%|â–ˆâ–ˆ        | 18035/90000 [00:31<04:35, 260.92it/s] 20%|â–ˆâ–ˆ        | 18049/90000 [00:43<04:35, 260.92it/s] 20%|â–ˆâ–ˆ        | 18050/90000 [00:43<09:28, 126.61it/s] 20%|â–ˆâ–ˆ        | 18051/90000 [00:44<09:55, 120.78it/s] 20%|â–ˆâ–ˆ        | 18069/90000 [01:00<09:55, 120.78it/s] 20%|â–ˆâ–ˆ        | 18070/90000 [01:00<22:17, 53.77it/s]  20%|â–ˆâ–ˆ        | 18071/90000 [01:00<23:13, 51.62it/s] 20%|â–ˆâ–ˆ        | 18085/90000 [01:13<23:13, 51.62it/s] 20%|â–ˆâ–ˆ        | 18086/90000 [01:13<42:39, 28.10it/s] 20%|â–ˆâ–ˆ        | 18087/90000 [01:14<44:26, 26.97it/s] 20%|â–ˆâ–ˆ        | 18105/90000 [01:30<44:25, 26.97it/s] 20%|â–ˆâ–ˆ        | 18106/90000 [01:47<2:24:59,  8.26it/s] 20%|â–ˆâ–ˆ        | 18107/90000 [01:48<2:28:04,  8.09it/s] 20%|â–ˆâ–ˆ        | 18112/90000 [02:00<2:28:04,  8.09it/s] 20%|â–ˆâ–ˆ        | 18113/90000 [02:00<3:33:53,  5.60it/s] 20%|â–ˆâ–ˆ        | 18114/90000 [02:01<3:39:29,  5.46it/s] 20%|â–ˆâ–ˆ        | 18127/90000 [02:13<3:39:26,  5.46it/s] 20%|â–ˆâ–ˆ        | 18128/90000 [02:13<5:18:06,  3.77it/s] 20%|â–ˆâ–ˆ        | 18129/90000 [02:13<5:26:42,  3.67it/s] 20%|â–ˆâ–ˆ        | 18141/90000 [02:24<7:41:34,  2.59it/s] 20%|â–ˆâ–ˆ        | 18142/90000 [02:25<7:52:41,  2.53it/s] 20%|â–ˆâ–ˆ        | 18151/90000 [02:33<9:43:10,  2.05it/s] 20%|â–ˆâ–ˆ        | 18157/90000 [02:38<10:52:23,  1.84it/s] 20%|â–ˆâ–ˆ        | 18162/90000 [02:42<11:49:05,  1.69it/s] 20%|â–ˆâ–ˆ        | 18165/90000 [02:44<12:24:41,  1.61it/s] 20%|â–ˆâ–ˆ        | 18168/90000 [02:47<13:02:18,  1.53it/s] 20%|â–ˆâ–ˆ        | 18170/90000 [02:48<13:29:32,  1.48it/s] 20%|â–ˆâ–ˆ        | 18172/90000 [02:50<14:09:05,  1.41it/s] 20%|â–ˆâ–ˆ        | 18173/90000 [02:51<14:23:20,  1.39it/s] 20%|â–ˆâ–ˆ        | 18174/90000 [02:52<14:39:19,  1.36it/s] 20%|â–ˆâ–ˆ        | 18175/90000 [02:53<16:01:30,  1.24it/s] 20%|â–ˆâ–ˆ        | 18176/90000 [02:54<16:07:47,  1.24it/s] 20%|â–ˆâ–ˆ        | 18177/90000 [02:55<17:10:29,  1.16it/s] 20%|â–ˆâ–ˆ        | 18178/90000 [02:56<17:34:27,  1.14it/s] 20%|â–ˆâ–ˆ        | 18179/90000 [02:57<17:21:32,  1.15it/s] 20%|â–ˆâ–ˆ        | 18180/90000 [02:58<17:10:21,  1.16it/s] 20%|â–ˆâ–ˆ        | 18181/90000 [02:58<16:59:24,  1.17it/s] 20%|â–ˆâ–ˆ        | 18182/90000 [02:59<16:52:38,  1.18it/s] 20%|â–ˆâ–ˆ        | 18183/90000 [03:00<16:46:28,  1.19it/s] 20%|â–ˆâ–ˆ        | 18184/90000 [03:01<16:43:23,  1.19it/s] 20%|â–ˆâ–ˆ        | 18185/90000 [03:02<16:40:08,  1.20it/s] 20%|â–ˆâ–ˆ        | 18186/90000 [03:03<16:37:47,  1.20it/s] 20%|â–ˆâ–ˆ        | 18187/90000 [03:03<16:36:54,  1.20it/s] 20%|â–ˆâ–ˆ        | 18188/90000 [03:04<16:36:42,  1.20it/s] 20%|â–ˆâ–ˆ        | 18189/90000 [03:05<16:37:05,  1.20it/s] 20%|â–ˆâ–ˆ        | 18190/90000 [03:06<16:36:55,  1.20it/s] 20%|â–ˆâ–ˆ        | 18191/90000 [03:07<16:35:32,  1.20it/s] 20%|â–ˆâ–ˆ        | 18192/90000 [03:08<16:40:25,  1.20it/s] 20%|â–ˆâ–ˆ        | 18193/90000 [03:08<16:37:26,  1.20it/s] 20%|â–ˆâ–ˆ        | 18194/90000 [03:09<16:38:25,  1.20it/s] 20%|â–ˆâ–ˆ        | 18195/90000 [03:10<16:39:43,  1.20it/s] 20%|â–ˆâ–ˆ        | 18196/90000 [03:11<16:35:51,  1.20it/s] 20%|â–ˆâ–ˆ        | 18197/90000 [03:12<16:32:45,  1.21it/s] 20%|â–ˆâ–ˆ        | 18198/90000 [03:13<16:33:17,  1.20it/s] 20%|â–ˆâ–ˆ        | 18199/90000 [03:13<16:34:30,  1.20it/s] 20%|â–ˆâ–ˆ        | 18200/90000 [03:14<16:37:44,  1.20it/s] 20%|â–ˆâ–ˆ        | 18201/90000 [03:15<16:36:30,  1.20it/s] 20%|â–ˆâ–ˆ        | 18202/90000 [03:16<16:32:12,  1.21it/s] 20%|â–ˆâ–ˆ        | 18203/90000 [03:17<16:37:42,  1.20it/s] 20%|â–ˆâ–ˆ        | 18204/90000 [03:18<21:32:58,  1.08s/it] 20%|â–ˆâ–ˆ        | 18205/90000 [03:19<20:02:47,  1.01s/it] 20%|â–ˆâ–ˆ        | 18206/90000 [03:20<19:00:30,  1.05it/s] 20%|â–ˆâ–ˆ        | 18207/90000 [03:21<18:14:03,  1.09it/s] 20%|â–ˆâ–ˆ        | 18208/90000 [03:22<17:46:22,  1.12it/s] 20%|â–ˆâ–ˆ        | 18209/90000 [03:23<17:25:13,  1.14it/s] 20%|â–ˆâ–ˆ        | 18210/90000 [03:23<17:06:39,  1.17it/s] 20%|â–ˆâ–ˆ        | 18211/90000 [03:24<16:58:39,  1.17it/s] 20%|â–ˆâ–ˆ        | 18212/90000 [03:25<16:52:32,  1.18it/s] 20%|â–ˆâ–ˆ        | 18213/90000 [03:26<16:44:21,  1.19it/s] 20%|â–ˆâ–ˆ        | 18214/90000 [03:27<17:22:00,  1.15it/s] 20%|â–ˆâ–ˆ        | 18215/90000 [03:28<17:08:41,  1.16it/s] 20%|â–ˆâ–ˆ        | 18216/90000 [03:28<17:00:35,  1.17it/s] 20%|â–ˆâ–ˆ        | 18217/90000 [03:29<16:53:49,  1.18it/s] 20%|â–ˆâ–ˆ        | 18218/90000 [03:30<16:49:07,  1.19it/s] 20%|â–ˆâ–ˆ        | 18219/90000 [03:31<16:42:52,  1.19it/s] 20%|â–ˆâ–ˆ        | 18220/90000 [03:32<16:37:25,  1.20it/s] 20%|â–ˆâ–ˆ        | 18221/90000 [03:33<16:35:20,  1.20it/s] 20%|â–ˆâ–ˆ        | 18222/90000 [03:33<16:34:11,  1.20it/s] 20%|â–ˆâ–ˆ        | 18223/90000 [03:34<16:33:17,  1.20it/s] 20%|â–ˆâ–ˆ        | 18224/90000 [03:35<16:35:50,  1.20it/s] 20%|â–ˆâ–ˆ        | 18225/90000 [03:36<16:32:28,  1.21it/s] 20%|â–ˆâ–ˆ        | 18226/90000 [03:37<16:34:29,  1.20it/s] 20%|â–ˆâ–ˆ        | 18227/90000 [03:38<16:32:23,  1.21it/s] 20%|â–ˆâ–ˆ        | 18228/90000 [03:38<16:32:39,  1.21it/s] 20%|â–ˆâ–ˆ        | 18229/90000 [03:39<16:35:08,  1.20it/s] 20%|â–ˆâ–ˆ        | 18230/90000 [03:40<16:36:18,  1.20it/s] 20%|â–ˆâ–ˆ        | 18231/90000 [03:41<16:35:25,  1.20it/s] 20%|â–ˆâ–ˆ        | 18232/90000 [03:42<16:33:45,  1.20it/s] 20%|â–ˆâ–ˆ        | 18233/90000 [03:43<16:30:06,  1.21it/s] 20%|â–ˆâ–ˆ        | 18234/90000 [03:43<16:32:40,  1.20it/s] 20%|â–ˆâ–ˆ        | 18235/90000 [03:44<16:30:50,  1.21it/s] 20%|â–ˆâ–ˆ        | 18236/90000 [03:45<16:36:55,  1.20it/s] 20%|â–ˆâ–ˆ        | 18237/90000 [03:46<16:32:13,  1.21it/s] 20%|â–ˆâ–ˆ        | 18238/90000 [03:47<16:32:55,  1.20it/s] 20%|â–ˆâ–ˆ        | 18239/90000 [03:48<16:34:59,  1.20it/s] 20%|â–ˆâ–ˆ        | 18240/90000 [03:48<16:43:09,  1.19it/s] 20%|â–ˆâ–ˆ        | 18241/90000 [03:49<16:35:22,  1.20it/s] 20%|â–ˆâ–ˆ        | 18242/90000 [03:50<16:36:20,  1.20it/s] 20%|â–ˆâ–ˆ        | 18243/90000 [03:51<16:34:43,  1.20it/s] 20%|â–ˆâ–ˆ        | 18244/90000 [03:52<16:33:19,  1.20it/s] 20%|â–ˆâ–ˆ        | 18245/90000 [03:53<16:36:09,  1.20it/s] 20%|â–ˆâ–ˆ        | 18246/90000 [03:53<16:32:24,  1.21it/s] 20%|â–ˆâ–ˆ        | 18247/90000 [03:54<16:36:16,  1.20it/s] 20%|â–ˆâ–ˆ        | 18248/90000 [03:55<16:33:08,  1.20it/s] 20%|â–ˆâ–ˆ        | 18249/90000 [03:56<16:31:45,  1.21it/s] 20%|â–ˆâ–ˆ        | 18250/90000 [03:57<16:28:32,  1.21it/s] 20%|â–ˆâ–ˆ        | 18251/90000 [03:58<16:28:25,  1.21it/s] 20%|â–ˆâ–ˆ        | 18252/90000 [03:58<16:25:27,  1.21it/s] 20%|â–ˆâ–ˆ        | 18253/90000 [03:59<16:23:43,  1.22it/s] 20%|â–ˆâ–ˆ        | 18254/90000 [04:00<16:24:38,  1.21it/s] 20%|â–ˆâ–ˆ        | 18255/90000 [04:01<16:37:33,  1.20it/s] 20%|â–ˆâ–ˆ        | 18256/90000 [04:02<16:37:59,  1.20it/s] 20%|â–ˆâ–ˆ        | 18257/90000 [04:02<16:35:45,  1.20it/s] 20%|â–ˆâ–ˆ        | 18258/90000 [04:03<16:33:45,  1.20it/s] 20%|â–ˆâ–ˆ        | 18259/90000 [04:04<16:31:15,  1.21it/s] 20%|â–ˆâ–ˆ        | 18260/90000 [04:05<16:33:02,  1.20it/s] 20%|â–ˆâ–ˆ        | 18261/90000 [04:06<16:33:52,  1.20it/s] 20%|â–ˆâ–ˆ        | 18262/90000 [04:07<16:37:22,  1.20it/s] 20%|â–ˆâ–ˆ        | 18263/90000 [04:07<16:31:47,  1.21it/s] 20%|â–ˆâ–ˆ        | 18264/90000 [04:08<16:31:59,  1.21it/s] 20%|â–ˆâ–ˆ        | 18265/90000 [04:09<16:31:29,  1.21it/s] 20%|â–ˆâ–ˆ        | 18266/90000 [04:10<16:30:26,  1.21it/s] 20%|â–ˆâ–ˆ        | 18267/90000 [04:11<16:30:32,  1.21it/s] 20%|â–ˆâ–ˆ        | 18268/90000 [04:12<16:31:06,  1.21it/s] 20%|â–ˆâ–ˆ        | 18269/90000 [04:12<16:34:29,  1.20it/s]slurmstepd: error: *** STEP 35260601.0 ON nid001324 CANCELLED AT 2025-01-26T20:33:24 ***
slurmstepd: error: *** JOB 35260601 ON nid001324 CANCELLED AT 2025-01-26T20:33:24 ***
